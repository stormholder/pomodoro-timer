#include <iostream>
#include <fstream>
#include <iomanip>
#include <chrono>
#include <thread>
#include <stdlib.h>
#include <signal.h>
#include <string.h>
typedef std::chrono::high_resolution_clock Clock;
#include <glib.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <gtk/gtk.h>
#include <libnotify/notify.h>

/* To compile use:
 * g++ main.cpp -o main -std=c++11 -pthread `pkg-config --cflags --libs libnotify`
 * */

#define POMO 25
#define POMOBREAK 5
#define POMOBREAKLARGE 30

/* GIMP RGBA C-Source image dump (pomodorotechnique-logo.c) */

static const struct {
  guint  	 width;
  guint  	 height;
  guint  	 bytes_per_pixel; /* 2:RGB16, 3:RGB, 4:RGBA */ 
  guint8 	 pixel_data[32 * 29 * 4 + 1];
} gimp_image = {
  32, 29, 4,
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\347#/\7\344&,>\354"
  "bgS\321\354\321\242\301\345\301\307\367\220\227\276\343\35$\332\344&,\342"
  "\344&,\352\344&,\351\344%+\341\345\322\306\341\260\333\255\341\364\360\353"
  "\267\342\32\40T\330\0\0\13\0\0\0\0\0\0\0\0\0\0\0\0\377\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\343%-\0\0\0\0\0\344"
  "&,+\344&,\263\344&,\377\344&,\377\343!'\377\341\311\274\377L\260H\377f\276"
  "d\377\327\313\267\377\357V^\377\343\35$\377\344\")\377\350\300\267\377G\254"
  "A\377S\263O\377\373\235\244\377\345,1\377\357\177\203\377\351LP\343\344&"
  ",\260\344&,M\0\0\0\0\0\0\0\0\377\0U\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\377\377\377\0\0\0\0\0\343#)t\344&,\377\344$*\377\34718\377\355LT\377"
  "\355PX\377\3504;\377\376\302\310\377^\266Y\377A\251;\377\203\314\204\377"
  "\360\361\350\377\363\341\335\377Q\261L\377E\253?\377\256\317\241\377\344"
  "\37&\377\372\276\301\377\3516=\377\352?F\377\346.4\377\344#)\377\344&,\377"
  "\344&,>\0\0\0\0\344&,\0\0\0\0\0\0\0\0\0\0\0\0\0\342(,\0\0\0\0\0\364\246\251"
  "n\354di\377\347@F\377\361\223\225\377\277\355\307\377e\276d\377V\265S\377"
  "\207\317\211\377\275\352\303\377\301\343\277\377=\2477\377\337\361\336\377"
  "\343\362\343\377\340\361\337\377\302\344\300\377R\261L\377\355\371\356\377"
  "\260\346\267\377\216\323\221\377\203\315\204\377\207\317\211\377\270\351"
  "\277\377\351\254\247\377\3464:\377\344&,\377\344&,\232\344&,\0\344&,\0\0"
  "\0\0\0\344&,\0\0\0\0\0\344&,\335\343!'\377\343!'\377\343\36%\377\351QV\377"
  "\366\224\232\377\374\266\274\377\377\326\334\377\362\352\343\377\302\330"
  "\267\377h\272b\377E\253?\377\245\326\242\377B\251<\377H\254B\377E\253?\377"
  "G\254A\377J\255D\377`\266Z\377g\270a\377l\272f\377\\\264V\377T\263P\377N"
  "\260I\377\317\364\327\377\3477=\377\344%+\377\344&,\270\0\0\0\0\346&-\0\0"
  "\0\0\0\344&,\231\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,"
  "\377\344&,\377\344&,\377\344%+\377\366\253\257\377\207\312\204\377F\253@"
  "\377H\254B\377H\254B\377H\254B\377H\254B\377H\254B\377O\257I\377\365\345"
  "\340\377\343\"(\377\344$*\377\344$*\377\345'-\377\350@F\377\353Z`\377\344"
  "'-\377\365\257\262\377\350EJ\377\344%+_\0\0\0\0\342&.\16\344&,\377\344&,"
  "\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\345+2\377"
  "\301\335\271\377J\255E\377D\252>\377_\270[\377\272\343\273\377\361\363\354"
  "\377\360\366\355\377h\273d\377G\254A\377H\254B\377G\254A\377\337\342\321"
  "\377\343\"(\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344'-\377"
  "\345-3\377\371\314\315\344\0\0\0\0\344&,g\344&,\377\344&,\377\344&,\377\344"
  "&,\377\344&,\377\344&,\377\344&,\377\345,2\377\227\314\221\377\215\321\216"
  "\377\350\350\335\377\352}|\377\3508?\377\345,2\377\344$*\377\344%+\377\350"
  "DI\377\347\341\325\377Z\265V\377H\254B\377R\261M\377\366\225\232\377\344"
  "&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344(-"
  "\377\344$*\24\344&,\251\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377"
  "\344&,\377\343\40&\377\370\310\311\377\352cg\377\351:@\377\344#)\377\344"
  "%+\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344%+\377\354`d"
  "\377\304\357\314\377<\2465\377\307\336\276\377\344%+\377\344&,\377\344&,"
  "\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\203\344&,\314"
  "\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344%+\377\362\231\233"
  "\377\344#)\377\344%+\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377"
  "\344&,\377\344&,\377\344&,\377\344&,\377\344%+\377\346.5\377\347\272\263"
  "\377e\270_\377\344#)\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377"
  "\344&,\377\344&,\377\344&,\304\344&,\335\344&,\377\344&,\377\344&,\377\344"
  "&,\377\344&,\377\366\265\267\377\343\40&\377\344&,\377\344&,\377\344&,\377"
  "\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344"
  "&,\377\344&,\377\344&,\377\344#)\377\362\272\271\377\344!(\377\344&,\377"
  "\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\326\344"
  "&,\335\344&,\377\344&,\377\344&,\377\344&,\377\346:?\377\345+1\377\344&,"
  "\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377"
  "\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344"
  "%+\377\363\233\236\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377"
  "\344&,\377\344&,\377\344&,\327\343\"(\335\344&,\377\344&,\377\344&,\377\344"
  "&,\377\3468=\377\344#)\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,"
  "\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377"
  "\344&,\377\344&,\377\344&,\377\344%+\377\365\261\263\377\344&,\377\344&,"
  "\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\327\363\233"
  "\237\324\343\33\"\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344"
  "&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,"
  "\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377"
  "\344&,\377\360\204\210\377\344'-\377\344&,\377\344&,\377\344&,\377\344&,"
  "\377\344&,\377\344&,\377\344&,\317\372\326\327\247\356uz\372\3466;\377\344"
  "$*\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,"
  "\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377"
  "\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\34638\377\344&,\377\344"
  "&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\362\344&,0\343\37%\330"
  "\360\205\210J\356uy\370\360\204\207\377\345,2\377\344&,\377\344%+\377\344"
  "&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\345.4"
  "\377\3467=\377\34639\377\3464:\377\344&,\377\344&,\377\344&,\377\344&,\377"
  "\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344"
  "&,\326\344&,@\344&,\244\344&,\255\344&,\377\343!'N\356w{\240\360\203\206"
  "\376\345/5\377\365\250\253\377\344&,\377\344&,\377\344&,\377\344&,\377\344"
  "&,\377\344&,\377\344&,\377\357\200\203\377\362\220\223\377\361\214\220\377"
  "\352Y^\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344"
  "&,\377\344&,\377\344&,\377\344&,\375\344&-V\344&,p\344&,\377\344&,s\344&"
  ",q\344&,\377\344&,\377\344%+\326\377\377\377\37\3469>\246\366\267\271\377"
  "\34506\377\344'-\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\363"
  "\233\236\377\356x|\377\361\217\222\377\364\247\252\377\343!'\377\344&,\377"
  "\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\207\346"
  "(%\1\344&,\343\344&,\377\344&,\377\344&,=\344&,\"\344&,\377\344&,\377\344"
  "&,\377\344&,\375\344(.\275\377\377\377\23\353afb\344(.\374\364\247\251\377"
  "\344#)\377\355lq\377\344$*\377\347>C\377\344(.\377\347<B\377\352X\\\377\344"
  "(.\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\352\344&,"
  "8\336/2\4\344&,\314\344&,\376\344&,\377\344&,\377\344&,\377\0\0\0\0\0\0\0"
  "\0\344&,\311\344&,\377\344&,\377\344&,\377\344&,\377\344&,\376\344&,\343"
  "\344&,j\377\377\377=\336\4\11\27\365\253\256\267\343!'\316\361\210\213\377"
  "\343\40'\377\352TY\377\360\212\215\377\344&,\377\344&,\372\344&,\305\344"
  "&,g\345$*\23\345%/\15\344&,x\344&,\346\344&,\377\344&,\377\344&,\377\344"
  "&,\377\344&,\377\344&,\215\0\0\0\0\0\0\0\0\344&,9\344&,\377\344&,\377\344"
  "&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344%+\377\344&,\355\344'-"
  "\323\344&,\251\34628\207\344%+f\34516`\350DIl\344&,j\344&,\204\344&,\260"
  "\344&,\325\344&,\360\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344"
  "&,\377\344&,\377\344&,\377\344&-\25\344',\0\0\0\0\0\0\0\0\0\344&,\260\344"
  "&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,"
  "\377\344&,\377\344&,\377\344&,\377\344&,\377\344&-\377\347>C\377\344&,\377"
  "\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344"
  "&,\377\344&,\377\344&,\377\344&,\377\344&,~\0\0\0\0\0\0\0\0\0\0\0\0\344&"
  "+\0\345&-\12\344&,\375\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377"
  "\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\343\34\"\377\367\276\300"
  "\377\374\346\347\377\343\37%\377\344&,\377\344&,\377\344&,\377\344&,\377"
  "\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\341\271"
  "&,\0\343&,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\344&,!\344&,\377\344&,\377\344"
  "&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,"
  "\377\354im\377\372\325\327\377\371\321\322\377\362\223\226\377\344$*\377"
  "\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344"
  "&,\377\344&,\372\344$-\15\344)*\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\345&-'\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377"
  "\344&,\377\344&,\377\344&,\377\343!'\377\343\37%\377\343\37%\377\343\40&"
  "\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377"
  "\344&,\377\344&,\361\344&,\16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\344&.\14\344&,\344\344&,\377\344&,\377\344&"
  ",\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377"
  "\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344"
  "&,\377\344&,\324\0\0\0\0\333-\"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\346'.\0\0\0\0\0\344&,\235\344&,\374\344"
  "&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,"
  "\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\363"
  "\344&,p\0\0\0\0\344&.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\344&,\246"
  "\344&,\364\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344&,\377\344"
  "&,\377\344&,\377\344&,\377\344&,\377\344&,\357\344&,v\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\344%+\0\0\0\0\0\342"
  "(*\16\344&,\177\344&,\321\344&,\373\344&,\373\344&,\372\344&,\365\344&,\273"
  "\344&,^\0\0\0\0\0\0\0\0\344&+\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\344"
  "&+\3\0\0\0\0\0\0\0\0\0\0\0\0",
};


struct settings {
	bool gui = false;
	bool log = false;
};

int pomoCount = 0;

void showProgress(int timeout);
void SIGINTHandler(int param);
void sendNotification(const char* message);
void parseArgs(settings *settings, char *args[], int argsCount);
void createTrayIcon();
void mainLoop();


asm 	(".section .comment.manifest\n\t"
	".string \"ver 0.9\"\n\t"
	".section .text");

static gpointer
thread_func(gpointer user_data) {
	GSource *source;
	mainLoop();
}

int main( int argc, char *argv[] ) {
	signal(SIGINT, SIGINTHandler);
	settings s;
	parseArgs(&s, argv, argc);
	if (s.log) {
		std::cout << "Logging enabled" << std::endl;
	}
	if (s.gui) {
		std::cout << "GUI enabled" << std::endl;
		gtk_init(&argc, &argv);
		createTrayIcon();
		GThread *thread[1];
		int n = 1;
		thread[0] = g_thread_new(NULL, thread_func, GINT_TO_POINTER(n));
		gtk_main();
		g_thread_join(thread[0]);
	} else {
		mainLoop();
	}
	return 0;
}

void mainLoop() {
	int breakLength = POMOBREAK;
	while (true) {
		std::cout << "New pomodoro!" << std::endl;
		sendNotification("New pomodoro!");
		pomoCount++;
		std::thread pomo (showProgress, POMO * 60);
		pomo.join();
		if (pomoCount % 4 == 0) {
			breakLength = POMOBREAKLARGE;
		} else {
			breakLength = POMOBREAK;
		}
		std::cout << "Pomodoro break " << std::setw(2) << breakLength << " minutes" << std::endl;
		std::string notification = "Pomodoro break ";
	       	notification.append(std::to_string(breakLength));
	       	notification.append(" minutes");
		sendNotification(notification.c_str());
		std::thread pomoBreak (showProgress, breakLength * 60);
		pomoBreak.join();

	}
}

void parseArgs(settings *settings, char *args[], int argsCount) {
	if (argsCount == 1) return;
	for (int i = 1; i < argsCount; i++) {
		if ( strcmp(args[i],"-h") == 0 || strcmp(args[i],"--help") == 0 ) {
			std::cout << "Usage: " << args[0] << " [options]" << std::endl
			<< "\t-h|--help\tShows this help message" << std::endl
			<< "\t-g|--gui\tEnables gui" << std::endl
			<< "\t-l|--log\tSaves your progress to log file" << std::endl
			<< "\t-b|--block\tAutomatically blocks computer for a long pomodoro break" << std::endl;
			exit(1);
		}
		if ( strcmp(args[i],"-l") == 0 || strcmp(args[i],"--log") == 0 ) {
			settings->log = true;
		}
		if ( strcmp(args[i],"-g") == 0 || strcmp(args[i],"--gui") == 0 ) {
			settings->gui = true;
		}
	}
	std::cout << std::endl;
}

void showProgress( int timeout ) {
	float progress = 0.0;
	int barWidth = 60;
	float add = 1.0 / (float)timeout;
	int time, minutes, seconds;
	while (progress < 1.0) {
		time = timeout;
		minutes = time / 60;
		seconds = time%60;
		std::cout << "[";
		int pos = barWidth * progress;
		for (int i=0; i < barWidth; ++i) {
			if ( i < pos ) std::cout << "#";
			else std::cout << ".";
		}
		std::cout << "] " << std::setfill('0')
		       << std::setw(2) << minutes << ":"
		       << std::setw(2) << seconds << " left\r";
		std::cout.flush();
		std::this_thread::sleep_for(std::chrono::seconds(1));
		timeout--;
		progress += add;
	}
	for (int i=0;i < barWidth + 15;i++) {
		std::cout << " ";
	}
	std::cout << "\r";
	std::cout.flush();
}

void SIGINTHandler(int param) {
	std::cout << std::endl << "User pressed Ctrl+C" << std::endl;
	std::cout << pomoCount << " pomodoros triggered" << std::endl;
	std::string notification = "";
	notification.append(std::to_string(pomoCount));
	notification.append(" pomodoros triggered");
	sendNotification(notification.c_str());
	exit(1);
}

void sendNotification(const char* message) {
	notify_init("Pomo");
	NotifyNotification* n = notify_notification_new("Pomodoro", message, 0);
	notify_notification_set_timeout(n, 5000);
	if(!notify_notification_show(n,0)) {
		std::cerr << "notification failed" << std::endl;
	}
}

void createTrayIcon() {
	GtkStatusIcon *icon;
	GdkPixbuf *pixbuf;
	pixbuf = gdk_pixbuf_new_from_data(
			gimp_image.pixel_data,
			GDK_COLORSPACE_RGB,
			TRUE,
			8,
			gimp_image.width,
			gimp_image.height,
			gimp_image.width * 4,
			NULL,
			NULL
			);
	icon = gtk_status_icon_new_from_pixbuf(pixbuf);
	gtk_status_icon_set_tooltip(icon, "Pomodoro timer");
	gtk_status_icon_set_visible(icon, TRUE);
}
